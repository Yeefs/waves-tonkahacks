<!DOCTYPE html>
<html>
<head>

  <%- include ("../partials/header.ejs") %>

  <link rel="stylesheet" type="text/css" href="/stylesheets/app.css" />

    <script>

      const socket = io();
      const app = new PIXI.Application({
        width: window.innerWidth,
        height: window.innerHeight
      });

      //Table Stuff


      function region(x1, y1, x2, y2, name) {
    this.x1 = x1;
    this.y1 = y1;
    this.x2 = x2;
    this.y2 = y2;
    this.width = x2-x1;
    this.height = y2-y1;
    this.name = name;
  }
  
  region.prototype.isIn = function(x, y) {
    return ((Math.sign(this.x1 - x) != Math.sign(this.x2 - x)) && (Math.sign(this.y1 - y) != Math.sign(this.y2 - y)));
  }
  
  region.prototype.toString = function() {
    return `R: [${this.x1},${this.y1},${this.x2},${this.y2},${this.name}]`;
  }
  
  //Width and Height parameters are in person-sized units
  
  function table(w, h, x, y, name) {
    this.width = w;
    this.height = h;
    this.x = x;
    this.y = y;
    this.name = name;
    this.region = new region(x-personSize, y-personSize, x + (w + 1) * personSize, y + (h + 1) * personSize, name + "TableRegion");
  }
  
  table.prototype.toString = function() {
    return `T: [${this.width},${this.height},${this.x},${this.y},${this.name}]`;
  }
  
  function regionArgumentsFromList(str) {
    return [str[0], str.substring(4,str.length-1).split(",")];
  }


      //PIXIJS STUFF

      let students = {};

      //Background (Interactive)

      let bg = new PIXI.Sprite(PIXI.Texture.WHITE);

      bg.width = app.screen.width;
      bg.height = app.screen.height;

      bg.tint = 0xfacaca;

      bg.interactive = true;
      app.stage.addChild(bg);

      //Player Sprite

      function generatePlayer(name, inpX, inpY) {
        let newPlayer = new PIXI.Graphics();
        newPlayer.beginFill(0xffffff);
        newPlayer.drawCircle(15, 15, 15);
        newPlayer.endFill();
        newPlayer.pivot.x = 15;
        newPlayer.pivot.y = 15;
        newPlayer.x = inpX;
        newPlayer.y = inpY;
        newPlayer.vx = 0;
        newPlayer.vy = 0;
        newPlayer.vMax = 1;
        newPlayer.clickX = newPlayer.x;
        newPlayer.clickY = newPlayer.y;
        newPlayer.dx = 0;
        newPlayer.dy = 0;
        return newPlayer;
      }

      const selfStudent = generatePlayer("Egg", 200, 200);

      let state = function(){};

      //GameLoop

      gameLoop();

      //Mouse Interaction

      bg.on("click", (e) => {

        //console.log("CLICK");

        let pos = e.data.global;

        //playerS.x = pos.x;
        //playerS.y = pos.y;

        selfStudent.clickX = pos.x;
        selfStudent.clickY = pos.y;

        socket.emit("movement/goto", pos.x, pos.y);

        state = play;

      });

      function gameLoop() {
        requestAnimationFrame(gameLoop);
        state();
      }

      //Velocity Play Stuff

      function movePlayer(player, xTo, yTo) {
        player.dx = player.x - xTo;
        player.dy = player.y - yTo;

        let total = Math.sqrt(player.dx * player.dx + player.dy * player.dy);

        //playerS.vx = (playerS.dx)/100;
        //playerS.vy = (playerS.dy)/100;
        player.vx = (player.dx/total)*player.vMax;
        player.vy = (player.dy/total)*player.vMax;

        if (player.dx * player.dx + player.dy * player.dy <= 25) {
          player.x = xTo;
          player.y = yTo;
          //state = function(){};
        } else {
          player.x -= player.vx;
          player.y -= player.vy;
        }
      }

      function play() {

        movePlayer(selfStudent, selfStudent.clickX, selfStudent.clickY);
        
        for (let stud in students) {
          movePlayer(students[stud], students[stud].clickX, students[stud].clickY);
        }

      }

      function initalizePlayer(id, list) {
          let stud = generatePlayer(list[0], list[1], list[2]);

          if (id != socket.id){
            app.stage.addChild(stud);
          }

          return stud;
      }

      //Add Player Sprite

      app.stage.addChild(selfStudent);


      //USERNAME FORM STUFF


      function setName() {
        let name = document.getElementById("name").value;

        if (name.length == 0) {
          return;
        }

        document.getElementById("infoForm").setAttribute("class", "hidden");
        socket.emit("profile/join", name, selfStudent.x, selfStudent.y, "none");
        socket.emit("info/getPlayerList");
        socket.emit("info/getObjects");
        document.getElementById("canvasContainer").appendChild(app.view);
      }

      socket.on("info/playerList", (people) => {
        students = {};
        for (let i in people) {
          students[i] = initalizePlayer(i, people[i]);
        }
      });

      socket.on("info/addPlayer", (id, list) => {
        if (students[id] != undefined) {
          console.log("Panic.");
        }
        students[id] = initalizePlayer(id, list);
      });

      socket.on("info/removePlayer", (id) => {
        if (students[id] != undefined) {
          app.stage.removeChild(students[id]);
          delete students[id];
        }
      });

      socket.on("info/objectList", function(objectList) {
        //TODO: MAKE IT WORK
        console.log(objectList);
      });

      socket.on('movement/update', (id, list) => {
        students[id].clickX = list[1];
        students[id].clickY = list[2];
      });

      socket.on('info/chatmessage', (message) => {
        console.log(message);
      });

      socket.on('info/message', (message) => {
        console.log("TO YOU: " + message);
      });

      socket.on('message', (sender, time, message) => {
        //Egg
      });

      function sendMessage() {
        socket.emit('message', messageBox.value);
        //Egg
      }

    </script>

</head>

<body>

  <div id="infoForm">
      <label>Username:</label><br>
      <input type="text" id="name"><br>
      <input type="submit" id="submit" value="Submit" onclick="setName();">
  </div>

  <div id="canvasContainer"></div>

</body>
</html>