<!DOCTYPE html>
<html>
<head>

  <%- include ("../partials/header.ejs") %>

  <link rel="stylesheet" type="text/css" href="/stylesheets/app.css" />

    <script>

//Initalization of client-side socket.io and pixi.js
const socket = io();
const app = new PIXI.Application({
    width: window.innerWidth,
    height: window.innerHeight
});

//Pixel size of a student
const personSize = 40
//Current sitting state of the client
let sitting = false;


//Table Functions

//This creates a region object depending on two corners (points) and a name
function region(x1, y1, x2, y2, name) {
    this.x1 = parseInt(x1);
    this.y1 = parseInt(y1);
    this.x2 = parseInt(x2);
    this.y2 = parseInt(y2);
    this.width = this.x2 - this.x1;
    this.height = this.y2 - this.y1;
    this.name = name;
}

//Checks if a point is within the region
region.prototype.isIn = function(x, y) {
    return ((Math.sign(this.x1 - x) != Math.sign(this.x2 - x)) && (Math.sign(this.y1 - y) != Math.sign(this.y2 - y)));
}

//Creates a tabkes depending on the (Width and Height parameters) are in person-sized units
function table(w, h, x, y, name) {
    this.width = parseInt(w);
    this.height = parseInt(h);
    this.x = parseInt(x);
    this.y = parseInt(y);
    this.name = name;
    this.region = new region(this.x - personSize, this.y - personSize, this.x + (this.width + personSize), this.y + (this.height + personSize), name + "TableRegion");
}

//Command for generating a list of positions that are designated to have seats on a table
table.prototype.seats = function() {
    let temp = [];
    for (let x = 0; x < this.width; x += personSize) {
        temp.push([this.x + x, this.y - personSize]);
        temp.push([this.x + x, this.y + this.height]);
    }
    for (let y = 0; y < this.height; y += personSize) {
        temp.push([this.x - personSize, this.y + y]);
        temp.push([this.x + this.width, this.y + y]);
    }
    return temp;
}

//Takes in the format of the table and region toString methods and returns it in a more usable format
function regionArgumentsFromList(str) {
    return [str[0], str.substring(4, str.length - 1).split(",")];
}

//Local variables, such as the classroom objects (tables and regions) rendered on the screen, seat objects, and current region that the client is on.
let objects = {};
let seatReferences = [];
let currentRegion = null;

//Takes in an object list and draws them on the screen

function drawObjects(objectList) {

    //Convert objects into a usable format through regionArgumentsFromList

    for (let obj in objectList) {
        let args = regionArgumentsFromList(objectList[obj]);

        switch (args[0]) {
            case "T":
                objects[args[1][4]] = new table(...args[1]);
                objects[objects[args[1][4]].region.name] = objects[args[1][4]].region;
                break;
            case "R":
                objects[args[1][4]] = new region(...args[1]);
        }

        //Visualize as a table or region depending what type of object it is
        for (let obj in objects) {
            let graphics = new PIXI.Graphics();
            if (obj.endsWith("Region")) {
                graphics.lineStyle(2, (obj != "SRegion") ? 0x0000FF : 0xFF0000);
                graphics.drawRect(objects[obj].x1, objects[obj].y1, objects[obj].width, objects[obj].height);
                if (obj == "SRegion") {
                    createSeat(320, 40);
                }
            } else {
                graphics.lineStyle(2, 0xA06209);
                graphics.beginFill(0xD07D07);
                graphics.drawRect(objects[obj].x, objects[obj].y, objects[obj].width, objects[obj].height);
                generateSeats(objects[obj]);
            }
            app.stage.addChild(graphics);
        }


    }
}

//More pixijs functions

//Create interactive background
let bg = new PIXI.Sprite(PIXI.Texture.WHITE);
bg.tint = 0xfacaca;
bg.interactive = true;

let students = {};
let selfStudent;
let state = function() {};

//Prepares certain pixi.js application elements, such as screen size and the player
function prepareCanvasOptions() {
    bg.width = app.screen.width;
    bg.height = app.screen.height;
    app.stage.addChild(bg);
    selfStudent = generatePlayer(document.getElementById("name").value, 340, 360);
    app.stage.addChild(selfStudent);
    state = play;
    gameLoop();
}

//Generates a player sprite and returns the reference
function generatePlayer(name, inpX, inpY) {
    let newPlayer = new PIXI.Graphics();
    newPlayer.beginFill(0xffffff);
    newPlayer.drawCircle(20, 20, 20);
    newPlayer.endFill();
    newPlayer.pivot.x = 20;
    newPlayer.pivot.y = 20;
    newPlayer.x = inpX;
    newPlayer.y = inpY;
    newPlayer.vx = 0;
    newPlayer.vy = 0;
    newPlayer.dx = 0;
    newPlayer.dy = 0;
    newPlayer.vMax = 1;
    newPlayer.clickX = newPlayer.x;
    newPlayer.clickY = newPlayer.y;
    return newPlayer;
}

//Visually creates a seat
function createSeat(x, y) {
    let graphics = new PIXI.Graphics();
    graphics.lineStyle(2, 0xA06209);
    graphics.beginFill(0xD07D07);
    graphics.drawRect(x + personSize / 4, y + personSize / 4, personSize / 2, personSize / 2);
    graphics.interactive = true;
    graphics.on('click', (e) => {
        console.log("Sitting Attempted");
        moveTo(x + personSize / 2, y + personSize / 2, true);
    });
    app.stage.addChild(graphics);
}

//Takes in a list of seat positions and generates a seat at each one
function generateSeats(table) {
    let allSeats = table.seats();
    for (let seat in allSeats) {
        createSeat(...allSeats[seat]);
    }
}

//Updates currentRegion to a new region depending on position
function updateRegion() {
    for (let obj in objects) {
        if (obj.endsWith("Region")) {
            if (objects[obj].isIn(selfStudent.clickX, selfStudent.clickY)) {
                currentRegion = obj;
                socket.emit("info/setRegion", obj);
                return;
            }
        }
    }
    currentRegion = null;
    socket.emit("info/setRegion", null);
}

//Handles movement, depending on what is necessary 
function moveTo(x, y, newSittingState) {

    if (sitting == true) {
        sitting = false;
        socket.emit("movement/unsit");
    }

    if (newSittingState == true) {
        socket.emit("movement/requestSit", x, y);
        return;
    }

    selfStudent.clickX = x;
    selfStudent.clickY = y;
    updateRegion();
    socket.emit("movement/goto", x, y);
}

//If the seating is accepted, allows client to move to that seat
socket.on("movement/sitAccept", (x, y) => {
    sitting = true;

    selfStudent.clickX = x;
    selfStudent.clickY = y;
    updateRegion();
    socket.emit("movement/goto", x, y);
});

//Handles mouse interaction with background
bg.on("click", (e) => {
    let pos = e.data.global;
    moveTo(pos.x, pos.y)
});

//Creates an update loop for the player 
function gameLoop() {
    requestAnimationFrame(gameLoop);
    state();
}

//Updates the current state of the player based on the direction and distance from the designated location
function movePlayer(player, xTo, yTo) {
    player.dx = player.x - xTo;
    player.dy = player.y - yTo;

    let total = Math.sqrt(player.dx * player.dx + player.dy * player.dy);

    player.vx = (player.dx / total) * player.vMax;
    player.vy = (player.dy / total) * player.vMax;

    //If the player is close enough snap to the desired location. If not, move closer to the desired location.
    if (player.dx * player.dx + player.dy * player.dy <= 25) {
        player.x = xTo;
        player.y = yTo;
    } else {
        player.x -= player.vx;
        player.y -= player.vy;
    }
}

//play is called by the gameLoop to constantly update the students' positions
function play() {

    //Update self player
    movePlayer(selfStudent, selfStudent.clickX, selfStudent.clickY);

    //Updates other players' positons on your screen
    for (let stud in students) {
        movePlayer(students[stud], students[stud].clickX, students[stud].clickY);
    }

}

//Initalizes a new player, but only adds it if it is not your own player. Otherwise, there would be two copies of your character.
function initalizePlayer(id, list) {
    let stud = generatePlayer(list[0], list[1], list[2]);

    if (id != socket.id) {
        app.stage.addChild(stud);
    }

    return stud;
}

//Upon setting and submitting your username, this function prepares the canvas (pixi.js) for viewing
function setName() {
    let name = document.getElementById("name").value;

    //Makes sure you cannot submit a blank name
    if (name.length == 0) {
        return;
    }

    //Asks server for classroom objects
    socket.emit("info/getObjects");

    //Runs prepareCanvasOptions function to prepare the canvas
    prepareCanvasOptions();

    //Unhides the chat, sends the join event to the server, gets other players, etc.
    document.getElementById("infoForm").setAttribute("class", "hidden");
    socket.emit("profile/join", name, selfStudent.x, selfStudent.y, null);
    socket.emit("info/getPlayerList");
    document.getElementById("canvasContainer").appendChild(app.view);
    document.getElementById("chatContainer").removeAttribute("class");
}

//If the Selector Button is clicked, it swaps its text
function swapSelector() {
    let scope = document.getElementById("scopeSelector");
    scope.innerText = (scope.innerText == "Global" ? "Table" : "Global");
}

//Adds a message to the chat
function addChatMessage(msg) {
    let msgBox = document.getElementById("chat");
    msgBox.innerHTML += `<p id="message">${msg}<br></p>`;
    if (msgBox.children.length > 10) {
        msgBox.removeChild(msgBox.children[0]);
    }
}

//Upon receiving the player list, updates the local player list to make sure they are all rendered
socket.on("info/playerList", (people) => {
    students = {};
    for (let i in people) {
        students[i] = initalizePlayer(i, people[i]);
    }
});

//Adds a new player to the player list
socket.on("info/addPlayer", (id, list) => {
    if (students[id] != undefined) {
        console.log("Player with socket already exists.");
    }

    //Double check that the player is already in the game before initalizing new players.
    if (students[socket.id] != undefined) {
        students[id] = initalizePlayer(id, list);
    }
});

//Removes a player from the player list
socket.on("info/removePlayer", (id) => {
    if (students[id] != undefined) {
        app.stage.removeChild(students[id]);
        delete students[id];
    }
});

//Upon receiving the object list, draws the objects
socket.on("info/objectList", function(objectList) {
    drawObjects(objectList);
    console.log(objectList);
});

//Upon receiving that another player has moved, updates the new movement position of them
socket.on('movement/update', (id, list) => {
    students[id].clickX = list[1];
    students[id].clickY = list[2];
});

//Upon receiving a region message, if the message is in your region, then adds it to the chat
socket.on('info/regionMessage', (region, sender, message) => {
    if (currentRegion == region) {
        addChatMessage(`[TABLE] ${sender}: ${message}`);
    }
});

//Upon receiving a global message, add the global message to the chat
socket.on('info/message', (sender, message) => {
    addChatMessage(`[GLOBAL] ${sender}: ${message}`);
});

//Reads the text message input and scope when the send button is sent, and sends a message to the server with these arguments 
function sendMessage() {

    let scope;
    let messageBox = document.getElementById("messageInput");

    //Checks the marked scope type
    switch (document.getElementById("scopeSelector").innerText) {
        case "Table":
            scope = "region";
            break;
        case "Global":
            scope = "global";
            break;
    };

    //Makes sure the message being sent is not empty
    if (messageBox.value.length == 0) {
        return;
    }
    //Sends message and clears the message box
    socket.emit('info/sendMessage', scope, messageBox.value);
    messageBox.value = "";
}

    </script>

</head>

<body>

  <div id="infoForm">
      <label>Username:</label><br>
      <input type="text" id="name"><br>
      <input type="submit" id="submit" value="Submit" onclick="setName();">
  </div>

  <div id="canvasContainer"></div>
  <div id="chatContainer" class="hidden">
    <div id="chat"></div>
    <div id="chatInput">
      <input id="messageInput"></input>
      <button id="scopeSelector" onClick="swapSelector();">Global</button>
      <button id="submitButton" onClick="sendMessage();">Send</button>
    </div>
  </div>

</body>
</html>